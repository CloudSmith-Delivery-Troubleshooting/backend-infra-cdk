name: Deploy Backend Infrastructure CDK

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      prefix:
        description: 'Resource prefix (leave empty for auto)'
        required: false
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  # Linting and testing job
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Create .npmrc file
        run: |
          echo "registry=https://registry.npmjs.org/" > ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          cat ~/.npmrc

      - name: Install dependencies
        run: npm ci --registry 

      - name: Run TypeScript compilation
        run: npm run build

      - name: Run tests
        run: npm test

  # CDK diff job for pull requests
  cdk-diff:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.prefix }}" ]; then
            echo "PREFIX=${{ github.event.inputs.prefix }}" >> $GITHUB_ENV
          else
            echo "PREFIX=pr-${{ github.event.number }}" >> $GITHUB_ENV
          fi

      - name: CDK Bootstrap (if needed)
        run: npx cdk bootstrap --require-approval never
        env:
          PREFIX: ${{ env.PREFIX }}

      - name: CDK Diff
        run: npx cdk diff --require-approval never
        env:
          PREFIX: ${{ env.PREFIX }}

  # Deploy job for main/develop branches and manual triggers
  deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      id-token: write
    environment: 
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.prefix }}" ]; then
            echo "PREFIX=${{ github.event.inputs.prefix }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "PREFIX=prod" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "PREFIX=staging" >> $GITHUB_ENV
          else
            echo "PREFIX=dev" >> $GITHUB_ENV
          fi

      - name: CDK Bootstrap
        run: npx cdk bootstrap --require-approval never
        env:
          PREFIX: ${{ env.PREFIX }}

      - name: CDK Deploy
        run: npx cdk deploy --require-approval never --outputs-file outputs.json
        env:
          PREFIX: ${{ env.PREFIX }}

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-${{ env.PREFIX }}
          path: outputs.json
          retention-days: 30

      - name: Display deployment info
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.PREFIX }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Account**: ${{ env.AWS_ACCOUNT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Stack Name**: ${{ env.PREFIX }}-BackendInfraStack" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f outputs.json ]; then
            echo "### Stack Outputs:" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat outputs.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  # Cleanup job for PR environments (optional)
  cleanup-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Cleanup PR environment
        run: |
          export PREFIX=pr-${{ github.event.number }}
          npx cdk destroy --force || echo "Stack may not exist or already deleted"
        continue-on-error: true
